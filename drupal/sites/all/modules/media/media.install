<?php

/**
 * @file
 * Install, update and uninstall functions for the Media module.
 */

define('MEDIA_UPDATE_RECORDS_ON_INSTALL', 200);

/**
 * Implements hook_install().
 */
function media_install() {
  /**
   * DISCLAIMER:
   * Yes I am altering a core table.
   * No I am not on crack.
   * Basically, the problem we're facing is the media "type" which is not the
   * mime type, but is probably computed from it.
   *
   * The file table has no type field.  As a result, we would have to either:
   *
   * 1). Create a media_files table to join them.  This is nice and clean,
   * however it requires keeping the tables in sync, and it also means we have
   * to write our own SQL instead of using BaseEntityController, and that's
   * kinda scary.
   *
   * 2). Make the media type a "computed" field.  Wherein, everytime we loaded
   * a piece of media, we would need to compute its type from the mime-type.
   * This is unacceptable from a performance standpoint and also requires us
   * override the Controller in ways we probably don't want to.
   *
   * I know it's a sin, but I think it is also excusable because:
   *
   * 1). This is hoping to be a core addition, so think of it as a core patch
   * that will eventually go in.
   *
   * 2). It is adding a new field, so it shouldn't cause any conflicts.  If it
   * does that INSERT / SELECT code is badly written and should use complete
   * INSERTS or column names.
   */

  // Alter {file_managed}.type and add it as an index.
  db_add_field('file_managed', 'type', _media_type_field_spec());
  db_add_index('file_managed', 'file_type', array('type'));
}

/**
 *  Implement hook_enable().
 */
function media_enable() {
  // @TODO: Revisit the default types to provide. For instance, PDFs and text.
  // @TODO: We may need to disable the media bundle & field in hook_disable.

  $view_mode_defaults = array(
    'media_link'   => 'file_generic',
    'media_preview' => 'media_large_icon',
    //@TODO: We need a real "original" formatter
    'media_original' => 'file_generic',
    'media_small'   => 'hidden',
    'media_large'   => 'file_generic',
  );

  $types = array();

  // This is the default type which will be used if no other type is found
  $types['default'] = new StdClass();
  $types['default']->name = 'default';
  $types['default']->label = "Other";
  $types['default']->base = TRUE;
  //@todo: I don't like this but we have to do something here.
  $view_mode_settings['default'] = $view_mode_defaults;

  // This should always run last because it is a fallback in case no other
  // types claim the media.
  $types['default']->weight = 1000;
  // This is the default.
  $types['default']->type_callback_args = array(
    'match_type' => 'any',
    'mimetypes' => array('/.*/'),
  );

  // Add the common media types.
  $types['image'] = new StdClass();
  $types['image']->name = 'image';
  $types['image']->label = "Image";
  $types['image']->base = TRUE;
  $view_mode_settings['image'] = $view_mode_defaults;
  $view_mode_settings['image']['media_preview'] = 'styles_file_square_thumbnail';
  $view_mode_settings['image']['media_large'] = 'styles_file_large';
  $view_mode_settings['image']['media_original'] = 'styles_file_original';

  $types['image']->type_callback_args =
  array(
    'match_type' => 'all',
    'mimetypes' => array('/^image/'),
    'extensions' => array('jpg', 'jpeg', 'gif', 'png', 'tiff'),
    'streams' => array('public', 'private'),
  );

  $types['audio'] = new StdClass();
  $types['audio']->name = 'audio';
  $types['audio']->label = "Audio";
  $types['audio']->base = TRUE;

  // @todo: these are image specific, needs to change
  $view_mode_settings['audio'] = $view_mode_defaults;
  $types['audio']->type_callback_args = array(
    'match_type' => 'all',
    'mimetypes' => array('/^audio/'),
    'extensions' => array('mp3', 'ogg', 'wma'),
    'streams' => array('public', 'private'),
  );
  
  $types['video'] = new StdClass();
  $types['video']->name = 'video';
  $types['video']->label = "Video";
  $types['video']->base = TRUE;

  // @todo: these are image specific, needs to change
  $view_mode_settings['video'] = $view_mode_defaults;
  $view_mode_settings['video']['media_preview'] = 'styles_file_square_thumbnail';
  $view_mode_settings['video']['media_large'] = 'styles_file_large';

  // This is the default, otherwise could provide
  //$types['video']->type_callback = 'media_default_is_type';
  $types['video']->type_callback_args =
  array(
    'match_type' => 'all',
    'mimetypes' => array('/^video/'),
    'extensions' => array('mov', 'mp4', 'avi'),
    'streams' => array('public', 'private'),
  );

  foreach ($types as $name => $type) {
    media_type_save($type);
    media_type_configure_formatters($type->name, $view_mode_settings[$type->name]);
  }
  
  // Set permissions
  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    user_role_grant_permissions($rid, array('view media'));
  }

  // Updates the type field for the first MEDIA_UPDATE_RECORDS_ON_INSTALL files.
  $invalid_files = media_type_invalid_files_count();
  if ($invalid_files <= MEDIA_UPDATE_RECORDS_ON_INSTALL) {
    media_type_batch_update(FALSE, MEDIA_UPDATE_RECORDS_ON_INSTALL);
  }

  $invalid_files = media_type_invalid_files_count();
  if ($invalid_files > 0) {
    // Not all files could be converted. Display a persistant nag message on
    // every page for the administrator, urging them to finish the process.
    media_variable_set('show_file_type_rebuild_nag', TRUE);
  }
}

/**
 *  Define the database {file_managed}.type field.
 */
function _media_type_field_spec() {
  return array(
    'description' => 'Type of file for use in Media Bundles',
    'type' => 'varchar',
    'length' => 50,
    'not null' => FALSE,
  );
}

/**
 * Implement hook_schema().
 */
function media_schema() {

  // Using this strange looking function name because of http://drupal.org/node/150220.
  // Any changes to this table should happen after this line.
  $schema['media_type'] = _media_update_7002_schema_media_type();

  $schema['media_list_type'] = array(
    'description' => 'Stores the user preference for whether to list as table or images.',
    'fields' => array(
      'uid' => array(
        'description' => 'The {user}.uid of the user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The type of display (table or images).',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('uid'),
  );

  $schema['cache_media_xml'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_media_xml']['description'] = 'Cache table for the the results of retreived XML documents for remote streams.';

  $schema['media_filter_usage'] = _media_update_7012_schema_media_filter_usage();

  return $schema;
}


/**
 * Implements hook_field_schema().
 */
function media_field_schema($field) {
  return array(
    'columns' => array(
      'fid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        //'description' => 'Used for storing additional information.  Can be harnessed by widgets',
      ),
    ),
    'indexes' => array(
      'fid' => array('fid'),
    ),
  );
}

/**
 * Implement hook_schema_alter().
 */
function media_schema_alter(&$schema) {
  // Alter {file_managed}.type.
  $schema['file_managed']['fields']['type'] = _media_type_field_spec();
}

/**
 * Implement hook_uninstall().
 */
function media_uninstall() {
  /**
   * See comment above in media_install.
   */
  db_drop_field('file_managed', 'type');
  foreach (media_variable_default() as $name => $value) {
    media_variable_del($name);
  }
}

/**
 * Create the {media_list_type} table.
 */
function media_update_7000() {
  db_create_table('media_list_type', array(
    'fields' => array(
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'type' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),
    ),
    'primary key' => array('uid'),
  ));
}

/**
 *  Create a cache table for media.
 */
function media_update_7001() {
  $schema = array();
  $schema['cache_media_xml'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_media_xml']['description'] = 'Cache table for the the results of retreived XML documents for remote streams.';
  db_create_table('cache_media_xml', $schema['cache_media_xml']);
}

/**
 * Add the media_type table and remove the variable
 */
function media_update_7002() {
  drupal_load('module', 'media');
  $old_types = variable_get('media_types');
  db_create_table('media_type', _media_update_7002_schema_media_type());
  foreach ($old_types as $type) {
    // Was an error in the original creation
    if (isset($type->callbacks)) {
      unset($type->callbacks);
    }
    $type->name = $type->machine_name;
    unset($type->machine_name);
    media_type_save($type);
  }
  variable_del('media_types');
}

// Using this strange looking function name because of http://drupal.org/node/150220.
// This function should never be modified.
function _media_update_7002_schema_media_type() {
  return array(
    'description' => 'Stores the settings for media types.',
    'fields' => array(
      'name' => array(
        'description' => 'The machine name of the media type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The label of the media type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'base' => array(
        'description' => 'If this is a base type (i.e. cannot be deleted)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'weight' => array(
        'description' => 'Weight of media type. Determines which one wins when claiming a piece of media (first wins)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
      ),
      'type_callback' => array(
        'description' => 'Callback to determine if provided media is of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'type_callback_args' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that will be passed to the callback function',
      ),
    ),
    'primary key' => array('name'),
  );
}

/**
 * We now prefix media namespaced variables with media__, so fix old variables.
 */
function media_update_7003() {
  drupal_load('module', 'media');
  foreach (media_variable_default() as $variable => $value) {
    if (($test = variable_get('media_' . $variable, TRUE)) == variable_get('media_' . $variable, FALSE)) {
      media_variable_set($variable, $test);
      variable_del('media_' . $variable);
    }
  }
}

/**
 * Removed /media from the menu.
 */
function media_update_7004() {
  menu_rebuild();
}

/**
 * Added the entity module
 */
function media_update_7005() {
  // This is a new dependency and must be enabled as soon as the new code is pushed.
  module_enable(array('entity'));
}

/**
 * HEAD changed the 'file' table to 'file_managed'.
 */
function media_update_7006() {
  // In case the user has used the head2head upgrade.
  if (!db_table_exists('file') && !db_table_exists('file_managed')) {
    db_rename_table('file', 'file_managed');
  }
}

/**
 * Changes the preview formatter for non-image types to the icon view.
 */
function media_update_7007() {
  drupal_load('module', 'media');
  drupal_load('module', 'field');

  foreach (media_type_get_types() as $type => $info) {
    if ($type != 'image') {
      media_type_configure_formatters($type, array('media_preview' => 'media_large_icon'));
    }
  }
}

/**
 * Give all users view media perm by default
 */
function media_update_7008() {
  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    user_role_grant_permissions($rid, array('view media'));
  }
}

/**
 * Changes the preview formatter for video types to a square thumbnail, like for images.
 */
function media_update_7009() {
  drupal_load('module', 'media');
  drupal_load('module', 'field');
  media_type_configure_formatters('video', array('media_preview' => 'styles_file_square_thumbnail'));
}

/**
 * Changes the large formatter for video types to the large file style.
 */
function media_update_7010() {
  // This formatter association was added to media_enable() at one point, but
  // without a corresponding update function, so here's that update function.
  drupal_load('module', 'media');
  drupal_load('module', 'field');
  media_type_configure_formatters('video', array('media_large' => 'styles_file_large'));
}

/**
 * Allows video as a type of media in the WYSIWYG
 */
function media_update_7011() {
  media_variable_set('wysiwyg_allowed_types', array('image','video'));
}

/**
 * Add media_filter_usage.
 */
function media_update_7012() {
  db_create_table('media_filter_usage', _media_update_7012_schema_media_filter_usage());
}

/**
 * Schema definition for media_update_7012().
 */
function _media_update_7012_schema_media_filter_usage() {
  return array(
    'description' => 'Stores fids that have been included in the media tag in formatted textareas.',
    'fields' => array(
      'fid' => array(
        'description' => 'The media {file_managed}.fid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The timestamp the fid was last recorded by media_filter()',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'file_managed' => array(
        'table' => 'file_managed',
        'columns' => array('fid' => 'fid'),
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array(
      'timestamp' => array('timestamp'),
    ),
  );
}

/**
 * Work around a core bug where text format cacheability is not updated.
 *
 * @see http://drupal.org/node/993230
 */
function media_update_7013() {
  $formats = filter_formats();
  foreach ($formats as $format) {
    $format->filters = filter_list_format($format->format);
    // filter_format_save() expects filters to be an array, however
    // filter_list_format() gives us objects.
    foreach ($format->filters as $key => $value) {
      $format->filters[$key] = (array) $value;
    }
    filter_format_save($format);
  }
}

/**
 * Renames the badly named variable for the theme used for the media browser
 * and other media related dialogs.
 */
function media_update_7014() {
  if ($old_value = variable_get('media__dialog_get_theme_name')) {
    variable_del('media__dialog_get_theme_name');
    variable_set('media__dialog_theme', $old_value);
  }
}

/**
 * Rebuild the registry to locate class files in new location.
 */
function media_update_7015() {
  registry_rebuild();
}